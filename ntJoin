#!/usr/bin/make -rRf

# Use minimizers to scaffold assemblies
# Written by Lauren Coombe @lcoombe
# ntJoin 0.0.1

list_files=None
min_targets=$(addsuffix .k$(k).w$(w).tsv, $(list_files))
bam_targets=$(addsuffix .k$(k).w$(w).n$(n).assigned.scaffolds.fa.bam.bai, $(list_files))
fai_targets=$(addsuffix .fai, $(list_files))

# List of edge weights
list_weights=None

# Prefix for output files
prefix=out.k$(k).w$(w).n$(n)

# Path to minimizer assemble code
assemble_path=$(shell dirname $(realpath $(MAKEFILE_LIST)))

# Reference

# Window size
w=1000

# Kmer size
k=32

# Number of threads
t=4

# Minimum edge weight
n=2

# Minimum gap size between scaffolds
g=20

# Whether mkt will be run or not
mkt=False

# The proportion of increasing/decreasing minimizer positions needed to orient a contig
m=90

# Reference genome (for analysis)
ref=None

# Run Quast in large mode (1) or not (0)
large=0

# Jupiter plot parameters
jupiter_scaffold=None
ng=90

SHELL=bash -e -o pipefail
ifeq ($(shell zsh -e -o pipefail -c 'true' 2>/dev/null; echo $$?), 0)
# Set pipefail to ensure that all commands of a pipe succeed.
SHELL=zsh -e -o pipefail
# Report run time and memory usage with zsh.
export REPORTTIME=1
export TIMEFMT=time user=%U system=%S elapsed=%E cpu=%P memory=%M job=%J
endif

# Record run time and memory usage in a file using GNU time.
ifneq ($(shell command -v gtime),)
time=command gtime -v -o $@.time
else
time=command time -v -o $@.time
endif

# Compress in parallel.
ifneq ($(shell command -v pigz),)
gzip=pigz -p$t
else
gzip=gzip
endif

help:
	@echo "Assembly merging with minimizers"
	@echo "Usage: minimizer_assembler-make assemble prefix=<prefix> list_files='List of fasta files' list_weights='List of weights (ints) per assembly'"
	@echo ""
	@echo "Note: ensure the lists of assemblies and weights are in the same order, and that both are space-separated"
	@echo "Options:"
	@echo "prefix	Prefix of intermediate output files [out]"
	@echo "t		Number of threads [4]"
	@echo "k		K-mer size for minimizers [64]"
	@echo "w		Window size for minimizers [1000]"
	@echo "n		Minimum edge weight [2]"
	@echo "g		Minimum gap size [20]"
	@echo "m		Minimum percentage of increasing/decreasing minimizer positions to orient contig [90]"
	@echo "mkt		If True, use Mann-Kendall Test to predict contig orientation (computationally-intensive) [False]"

assemble: $(min_targets) \
	$(fai_targets) \
	$(prefix).mx.dot \
	$(addsuffix .k$(k).w$(w).n$(n).assigned.scaffolds.fa.gz, $(list_files)) \
	$(addsuffix .k$(k).w$(w).n$(n).unassigned.scaffolds.fa.gz, $(list_files))

analysis: check_params_analysis \
	$(addsuffix .bam.bai, $(list_files)) \
	$(bam_targets) \
	quast_$(prefix)/report.tsv

all: check_params assemble analysis

jupiter: check_jupiter_params \
	check_params_analysis \
	$(prefix)-jupiter.png

check_params:
ifeq ($(list_weights), None)
	$(error must set list_weights)
endif
ifeq ($(list_files), None)
	$(error must set list_files)
endif

check_params_analysis:
ifeq ($(ref), None)
	$(error must set ref)
endif

check_jupiter_params:
ifeq ($(jupiter_scaffold), None)
	$(error must set jupiter_scaffold)
endif

version:
	@echo "ntJoin v0.0.1"
	@echo "Written by Lauren Coombe (lcoombe@bcgsc.ca)"

.PHONY: all version analysis assemble help check_params jupiter
.DELETE_ON_ERROR: $(prefix).n$(n).mx.dot
.SECONDARY:

%.fa.k$(k).w$(w).tsv: %.fa
	$(time) $(assemble_path)/src/physlr-indexlr --pos -k $(k) -w $(w) -t $(t) $< > $@

%.fa.fai: %.fa
	samtools faidx $<

%.fa.gz: %.fa
	$(gzip) $<
	
$(prefix).mx.dot: $(addsuffix .k$(k).w$(w).tsv, $(list_files))
ifeq ($(mkt), True)
	$(time) $(assemble_path)/bin/ntjoin_assemble.py -p $(prefix) -n $(n) -l "$(list_weights)" -k $(k) -g $(g) --mkt $^
else
	$(time) $(assemble_path)/bin/ntjoin_assemble.py -p $(prefix) -n $(n) -l "$(list_weights)" -k $(k) -g $(g) -m $(m) $^
endif

$(addsuffix .k$(k).w$(w).n$(n).assigned.scaffolds.fa, $(list_files)): $(prefix).mx.dot
	touch $@

$(addsuffix .k$(k).w$(w).n$(n).unassigned.scaffolds.fa, $(list_files)): $(prefix).mx.dot
	touch $@

%.all.scaffolds.fa: %.assigned.scaffolds.fa %.unassigned.scaffolds.fa
	cat $^ > $@

%.dot.png: %.dot
	dot -Tpng -o $@ $<

%.fa.bam: %.fa
	minimap2 -a -x asm5 -r100000 -t $(t) $(ref) $< |samtools view -b |samtools sort -o $@

%.bam.bai: %.bam
	samtools index $<

# Run QUAST
quast_$(prefix)/report.tsv: $(list_files) $(addsuffix .k$(k).w$(w).n$(n).assigned.scaffolds.fa, $(list_files)) $(addsuffix .k$(k).w$(w).n$(n).all.scaffolds.fa, $(list_files))
ifeq ($(large), 1)
	quast -t $(t) -o quast_$(prefix) -r $(ref) --fast --scaffold-gap-max-size 100000 --split-scaffolds \
	--large $^
else
	quast -t $(t) -o quast_$(prefix) -r $(ref) --fast --scaffold-gap-max-size 100000 --split-scaffolds \
	$^
endif

# Generate a Jupiter plot
$(prefix)-jupiter.png: $(jupiter_scaffold) $(ref)
	jupiter ng=$(ng) t=$(t) name=$(prefix)-jupiter ref=$(ref) fa=$(jupiter_scaffold)